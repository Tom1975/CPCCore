name: CMake

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ macOS-latest, windows-latest, Ubuntu-latest, ]
        include:
          - os: macOS-latest
            qt_version: 'clang_64'            
            cmake_arg: '' 
            other_installer: 'brew install openal-soft'
            build_folder: /build 
            install_folder: /install
            test_command: 'bin/unitTests'
          - os: windows-latest
            qt_version: 'win32_msvc2017'
            cmake_arg: '-AWin32' 
            other_installer: 'echo No more installer needed'
            build_folder: \build 
            install_folder: \install
            test_command: 'UnitTests\${{env.BUILD_TYPE}}\unitTests.exe'
          - os: Ubuntu-latest
            qt_version: 'gcc_64'            
            cmake_arg: '' 
            other_installer: 'sudo apt-get install udev && sudo apt-get install -y libudev-dev && sudo apt-get install build-essential libpthread-stubs0-dev libgl1-mesa-dev libx11-dev libxrandr-dev libfreetype6-dev libglew-dev libjpeg-dev'
            build_folder: /build 
            install_folder: /install
            test_command: 'bin/unitTests'
            
    steps:
    - uses: actions/checkout@v3
    
    - name: Install various 3rd party
      run: ${{ matrix.other_installer }}
      
    - name: Checkout submodules
      run: git submodule update --init --recursive
      
    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}${{build_folder}} -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DGENERATE_UNITTESTS=TRUE -DCMAKE_INSTALL_PREFIX=${{github.workspace}}${{ matrix.install_folder }} ${{ matrix.cmake_arg }}

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}${{build_folder}} --config ${{env.BUILD_TYPE}}

    - name: Install
      # Build your program with the given configuration
      run: cmake --install ${{github.workspace}}${{build_folder}}

    - name: Test
      working-directory: ${{github.workspace}}${{build_folder}}
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ${{matrix.test_command}}

